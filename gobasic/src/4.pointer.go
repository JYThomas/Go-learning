package main

import "fmt"

func main(){
	// 值类型和引用类型
	// 首先定义一个变量A
	A := 10
	
	var B int 
	B = A
	
	fmt.Println(A, B)  // 10, 10

	// 上面的赋值原理: 在内存中将 A 的值进行了拷贝 使用&获取变量内存地址(指针)
	fmt.Println(&A)  // 0xc0000a4010
	fmt.Println(&B)  // 0xc0000a4018

	// 上面的内存地址是不同的，说明这两个值在内存中存储是相互独立的 改变A的值并不会改变B的值
	A = 82
	fmt.Println(A, B)  // 82, 10
	
	fmt.Println(&A)  // 0xc0000a4010
	fmt.Println(&B)  // 0xc0000a4018

	// 类似于python占位符
	_, AA := 10, 1212
	fmt.Println(AA)
	// fmt.Println(_)  // cannot use _ as value or type
}

/*
备注：
	局部变量：在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。
	全局变量：在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。
	
	1.局部变量不会一直存在，在函数被调用时存在，函数调用结束后变量就会被销毁，即生命周期。
	2.Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。
*/